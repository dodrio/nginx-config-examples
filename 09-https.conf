server {
	listen 443 ssl http2;
	server_name example.com;

	ssl on;
	ssl_certificate	     /etc/nginx/certs/example.com.crt;
	ssl_certificate_key  /etc/nginx/certs/example.com.key;

	# enable session resumption to improve https performance
	# http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
	# According http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_cache,
	# 1M can cache 4000 session, adjust it according your condition.
	ssl_session_cache shared:SSL:50m;
	ssl_session_timeout 5m;

	# disable SSLv3(enabled by default since nginx 0.8.19), since it's less secure then TLS
	# http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
	# https://blog.qualys.com/ssllabs/2014/10/15/ssl-3-is-dead-killed-by-the-poodle-attack
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

	## Diffie-Hellman for TLS
	# https://weakdh.org/sysadmin.html
	# 1. ciphers chosen for forward secrecy and compatibility
	ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
	# 2. enables server-side protection from BEAST attacks
	# http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
	ssl_prefer_server_ciphers on;
	# 3. Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits, dhparams.pem is generated by
	#
	#     openssl dhparam -out dhparams.pem 2048
	#
	ssl_dhparam /etc/nginx/ssl/dhparam.pem;

	## OCSP
	# enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
	# http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
	ssl_stapling on;
	ssL_stapling_verify on;
	ssl_trusted_certificate /etc/nginx/certs/example.com.crt;
	resolver 114.114.114.114 114.114.114.115 223.5.5.5 223.6.6.6 8.8.8.8 8.8.4.4 valid=300s;
	resolver_timeout 5s;

	## HSTS
	# config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
	# to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
	#   max-age=31536000 means 1 year
	#   max-age=0 means clean the HSTS setting in browers, this can help you fix your wrong HSTS setting
	add_header Strict-Transport-Security "max-age=31536000;" always;

	# if you want to enable HSTS for all subdomains, use following line instead of above line.
	# add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;" always;
	...
}

# redirect all http traffic to https
server {
       listen 80;
       server_name example.com;
       return 301 https://$host$request_uri;
}
